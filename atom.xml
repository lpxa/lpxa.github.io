<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://knightl8.club</id>
    <title>Knight</title>
    <updated>2020-03-07T11:02:04.943Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://knightl8.club"/>
    <link rel="self" href="https://knightl8.club/atom.xml"/>
    <subtitle>持续性幻想做梦,间接性努力行动.</subtitle>
    <logo>https://knightl8.club/images/avatar.png</logo>
    <icon>https://knightl8.club/favicon.ico</icon>
    <rights>All rights reserved 2020, Knight</rights>
    <entry>
        <title type="html"><![CDATA[仿学生管理系统]]></title>
        <id>https://knightl8.club/post/fang-xue-sheng-guan-li-xi-tong/</id>
        <link href="https://knightl8.club/post/fang-xue-sheng-guan-li-xi-tong/">
        </link>
        <updated>2020-03-07T06:14:05.000Z</updated>
        <content type="html"><![CDATA[<p>#include &lt;stdio.h&gt;</p>
<p>#include &lt;stdlib.h&gt;</p>
<p>#include &lt;string.h&gt;</p>
<p>typedef struct _node</p>
<p>{</p>
<p>char name[64];</p>
<p>char id[10];</p>
<p>char score[64];</p>
<p>struct _node *next;</p>
<p>} Node;</p>
<p>typedef struct _list</p>
<p>{</p>
<p>Node *head;</p>
<p>} List;</p>
<p>//--1--插入新的学生(头插法)</p>
<p>void AddStudentByHead(List *list);</p>
<p>//尾插法V1</p>
<p>void AddStudentByEndV1(List *list);</p>
<p>//尾插法V2只能单独使用</p>
<p>void AddStudentByEndV2(List *list);</p>
<p>void ChangeStudent(List *list, char *input);</p>
<p>void Input(Node *p);</p>
<p>int Search(List *list, char *input);</p>
<p>void Delete(List *list, char *input);</p>
<p>void PrintStudent(List *list);</p>
<p>void ClearList(List *list);</p>
<p>Node *PrintFlage(List *list, char *input);</p>
<p>int main(void)</p>
<p>{</p>
<p>List list;</p>
<p>list.head = NULL;</p>
<p>char code;</p>
<p>int c;</p>
<p>char input1[64];</p>
<p>char input2[64];</p>
<p>char input3[64];</p>
<p>int flag = 0;</p>
<p>Node *temp;</p>
<p>while (1)</p>
<p>{</p>
<p>​<br>
​ printf(&quot;\n<br>
╔———————————————学生信息管理系统————————————————╗\n<br>
\n<br>
=============== 功能菜单 ================\n<br>
\n<br>
1 录入学生信息\n<br>
2 查找学生信息\n<br>
4 删除学生信息\n<br>
3 修改学生信息\n<br>
5 显示所有学生信息\n<br>
6 退出系统\n<br>
==========================================\n<br>
说明：通过数字选择菜单\n<br>
╚——————————————————————————————————————————————╝\n&quot;);</p>
<p>​    printf(&quot;请输入指令代码(1-6)\n&quot;);</p>
<p>​    do</p>
<p>​    {</p>
<p>​      scanf(&quot;%c&quot;, &amp;code);</p>
<p>​    } while (code&gt;54||code&lt;49);</p>
<p>​</p>
<p>​    switch (code)</p>
<p>​    {</p>
<p>​    case '1':</p>
<p>​      printf(&quot;请选择插入学生的方法(1-头插法 2-尾插法V1)😊;</p>
<p>​      scanf(&quot;%d&quot;, &amp;c);</p>
<p>​      switch (c)</p>
<p>​      {</p>
<p>​      case 1:</p>
<p>​        AddStudentByHead(&amp;list);</p>
<p>​        break;</p>
<p>​      case 2:</p>
<p>​        AddStudentByEndV1(&amp;list);</p>
<p>​        break;</p>
<p>​      default:</p>
<p>​        printf(&quot;输入指令错误\n&quot;);</p>
<p>​      }</p>
<p>​      break;</p>
<p>​    case '2':</p>
<p>​      printf(&quot;请输入你要查找的学生:&quot;);</p>
<p>​      scanf(&quot;%s&quot;, input1);</p>
<p>​      flag = (Search(&amp;list, input1));</p>
<p>​      if (flag &gt; 0)</p>
<p>​      {</p>
<p>​        temp = PrintFlage(&amp;list, input1);</p>
<p>​        printf(&quot;学生姓名:%s\t学号%s\t分数:%s\t&quot;, temp-&gt;name, temp-&gt;id, temp-&gt;score);</p>
<p>​      }</p>
<p>​      else</p>
<p>​      {</p>
<p>​        printf(&quot;不好意思,查无此人\n&quot;);</p>
<p>​      }</p>
<p>​      break;</p>
<p>​    case '3':</p>
<p>​      printf(&quot;请输入你要更改的学生名字:&quot;);</p>
<p>​      scanf(&quot;%s&quot;, input2);</p>
<p>​      flag = Search(&amp;list, input2);</p>
<p>​      temp = PrintFlage(&amp;list, input2);</p>
<p>​      if (flag &gt; 0)</p>
<p>​      {</p>
<p>​        printf(&quot;当前的学生信息为:\n&quot;);</p>
<p>​        printf(&quot;学生姓名:%s\t学号%s\t分数:%s\t&quot;, temp-&gt;name, temp-&gt;id, temp-&gt;score);</p>
<p>​        printf(&quot;请输入您要更改的学生信息\n&quot;);</p>
<p>​        ChangeStudent(&amp;list, input2);</p>
<p>​      }</p>
<p>​      else</p>
<p>​      {</p>
<p>​        printf(&quot;不好意思,你要更改的学生名字尚未存在\n&quot;);</p>
<p>​      }</p>
<p>​      break;</p>
<p>​    case '4':</p>
<p>​      printf(&quot;请输入你要删除的学生名字:&quot;);</p>
<p>​      scanf(&quot;%s&quot;, input3);</p>
<p>​      if (Search(&amp;list, input3) &gt; 0)</p>
<p>​      {</p>
<p>​        Delete(&amp;list, input3);</p>
<p>​      }</p>
<p>​      else</p>
<p>​      {</p>
<p>​        printf(&quot;不好意思,你要删除的学生名字尚未存在\n&quot;);</p>
<p>​      }</p>
<p>​      break;</p>
<p>​    case '5':</p>
<p>​      PrintStudent(&amp;list);</p>
<p>​      break;</p>
<p>​    case '6':</p>
<p>​      if (!list.head)</p>
<p>​      {</p>
<p>​        printf(&quot;还没有信息呢\n&quot;);</p>
<p>​      }</p>
<p>​      goto END;</p>
<p>​    default:</p>
<p>​      printf(&quot;输入指令错误\n&quot;);</p>
<p>​      break;</p>
<p>​    }</p>
<p>​    printf(&quot;<sup>__</sup>\n&quot;);</p>
<p>​    printf(&quot;\n\n&quot;);</p>
<p>}</p>
<p>END:</p>
<p>ClearList(&amp;list), printf(&quot;删库跑路成功<sup>__</sup>\n&quot;);</p>
<p>system(&quot;pause&quot;);</p>
<p>return 0;</p>
<p>}</p>
<p>//--1--插入新的学生</p>
<p>void AddStudentByHead(List *list)</p>
<p>{</p>
<p>Node *p, *temp;</p>
<p>p = (Node *)malloc(sizeof(Node));</p>
<p>Input(p);</p>
<p>if (list-&gt;head)</p>
<p>{</p>
<p>​    temp = list-&gt;head;</p>
<p>​    list-&gt;head = p;</p>
<p>​    p-&gt;next = temp;</p>
<p>}</p>
<p>else</p>
<p>{</p>
<p>​    list-&gt;head = p;</p>
<p>​    p-&gt;next = NULL;</p>
<p>}</p>
<p>}</p>
<p>//尾插法</p>
<p>void AddStudentByEndV1(List *list)</p>
<p>{</p>
<p>Node *p;</p>
<p>p = (Node *)malloc(sizeof(Node ));</p>
<p>Input(p);</p>
<p>Node *last;</p>
<p>last = list-&gt;head;</p>
<p>if (last)</p>
<p>{</p>
<p>​    while (last-&gt;next)</p>
<p>​    {</p>
<p>​      last = last-&gt;next;</p>
<p>​    }</p>
<p>​    last-&gt;next = p;</p>
<p>​    p-&gt;next=NULL;</p>
<p>}</p>
<p>else</p>
<p>{</p>
<p>​    list-&gt;head = p;</p>
<p>​    p-&gt;next = NULL;</p>
<p>}</p>
<p>}</p>
<p>//尾插法</p>
<p>/*</p>
<p>void AddStudentByEndV2(List *list)</p>
<p>{</p>
<p>Node *p;</p>
<p>p = (Node *)malloc(sizeof(Node ));</p>
<p>Input(p);</p>
<p>static Node *tail;</p>
<p>if (list-&gt;head)</p>
<p>{</p>
<p>​    tail=list-&gt;head;</p>
<p>​    tail-&gt;next = p;</p>
<p>​    p-&gt;next = NULL;</p>
<p>}</p>
<p>else</p>
<p>{</p>
<p>​    list-&gt;head = p;</p>
<p>​    p-&gt;next = NULL;</p>
<p>}</p>
<p>tail = p;</p>
<p>}</p>
<p>*/</p>
<p>void ChangeStudent(List *list, char *input)</p>
<p>{</p>
<p>Node *p;</p>
<p>for (p = list-&gt;head; p; p = p-&gt;next)</p>
<p>{</p>
<p>​    if (!strcmp(p-&gt;name, input))</p>
<p>​    {</p>
<p>​      Input(p);</p>
<p>​      break;</p>
<p>​    }</p>
<p>}</p>
<p>}</p>
<p>void Input(Node *p)</p>
<p>{</p>
<p>printf(&quot;请输入姓名:&quot;);</p>
<p>scanf(&quot;%s&quot;, p-&gt;name);</p>
<p>printf(&quot;请输入学号(2位数字)😊;</p>
<p>scanf(&quot;%s&quot;, p-&gt;id);</p>
<p>printf(&quot;请输入学生分数(小于1000)😊;</p>
<p>scanf(&quot;%s&quot;, p-&gt;score);</p>
<p>}</p>
<p>int Search(List *list, char *input)</p>
<p>{</p>
<p>int flag = -1; //标志</p>
<p>Node *p;</p>
<p>for (p = list-&gt;head; p; p = p-&gt;next)</p>
<p>{</p>
<p>​    if (!strcmp(p-&gt;name, input))</p>
<p>​    {</p>
<p>​      flag = 1;</p>
<p>​      break;</p>
<p>​    }</p>
<p>}</p>
<p>return flag;</p>
<p>}</p>
<p>Node *PrintFlage(List *list, char *input)</p>
<p>{</p>
<p>Node *p;</p>
<p>for (p = list-&gt;head; p; p = p-&gt;next)</p>
<p>{</p>
<p>​    if (!strcmp(p-&gt;name, input))</p>
<p>​    {</p>
<p>​      break;</p>
<p>​    }</p>
<p>}</p>
<p>return p;</p>
<p>}</p>
<p>void Delete(List *list, char *input)</p>
<p>{</p>
<p>Node *p, *q = NULL;</p>
<p>for (p = list-&gt;head; p; q = p, p = p-&gt;next)</p>
<p>{</p>
<p>​    if (!strcmp(p-&gt;name,input))</p>
<p>​    {</p>
<p>​      if (q)</p>
<p>​      {</p>
<p>​        q-&gt;next = p-&gt;next;</p>
<p>​</p>
<p>​      }</p>
<p>​      else</p>
<p>​      {</p>
<p>​        list-&gt;head = p-&gt;next;</p>
<p>​      }</p>
<p>​      free(p);</p>
<p>​      break;</p>
<p>​    }</p>
<p>​</p>
<p>}</p>
<p>}</p>
<p>void PrintStudent(List *list)</p>
<p>{</p>
<p>Node *p;</p>
<p>for (p = list-&gt;head; p; p = p-&gt;next)</p>
<p>{</p>
<p>​    printf(&quot;学生姓名:%s\t学号:%s\t分数:%s\t\n&quot;, p-&gt;name, p-&gt;id, p-&gt;score);</p>
<p>}</p>
<p>}</p>
<p>//--6--删库跑路</p>
<p>void ClearList(List *list)</p>
<p>{</p>
<p>Node *p, *q;</p>
<p>for (p = list-&gt;head; p; p = q)</p>
<p>{</p>
<p>​    q = p-&gt;next;</p>
<p>​    free(p);</p>
<p>}</p>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日一题总结]]></title>
        <id>https://knightl8.club/post/mei-ri-yi-ti-zong-jie/</id>
        <link href="https://knightl8.club/post/mei-ri-yi-ti-zong-jie/">
        </link>
        <updated>2020-03-06T14:19:28.000Z</updated>
        <content type="html"><![CDATA[<p>给定一个字符串，编写一个函数判定其是否为某个回文串的排列之一。</p>
<blockquote>
<p>示例 1：</p>
<p>输入：&quot;tactcoa&quot;<br>
输出：True<br>
解释：排列有 &quot;tacocat&quot;、&quot;atcocta&quot;，等等</p>
</blockquote>
<blockquote>
<p>示例 2：</p>
<p>输入：&quot;abcda&quot;<br>
输出：False</p>
</blockquote>
<p>我的思路:</p>
<p>如果输入的字符串长度是偶数倍,所以每个字符的次数都是偶数倍</p>
<p>如果输入的字符串长度是奇数倍,最多只能有一个字符的次数是奇数倍</p>
<pre><code class="language-python">def f(n):
    if len(n)%2==0:
        flag = 1
        d={}
        for i in n:
            d[i] = d.get(i,0)+1
        for j in d.values():
            if j%2==0:
                continue
            else:
                flag = 0
        if flag:
            return 1
        else:
            return 0
    else:
        flag = 0
        d={}
        for j in n:
            d[j] = d.get(j,0)+1
        for i in d.values():
            if i/2==0:
                flag=0
                continue
            if i%2==1:
                flag+=1
        if flag&lt;=1:
            return 1
        else:
            return 0
                
            
        
a = input()

if f(a):
    print(&quot;True&quot;)
else:
    print(&quot;False&quot;)
最后一次
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1021个位数统计(15分)]]></title>
        <id>https://knightl8.club/post/1021-ge-wei-shu-tong-ji-15-fen/</id>
        <link href="https://knightl8.club/post/1021-ge-wei-shu-tong-ji-15-fen/">
        </link>
        <updated>2020-03-06T13:40:33.000Z</updated>
        <content type="html"><![CDATA[<hr>
<p>title: '1021个位数统计(15分)'<br>
date: 2020-03-06 14:36:37<br>
tags: [c语言学习]<br>
published: true<br>
hideInList: false<br>
feature:<br>
isTop: false</p>
<hr>
<p>给定一个 <em>k</em> 位整数 <em>N</em>=<em>d**k</em>−110<em>k</em>−1+⋯+<em>d</em>1101+<em>d</em>0 (0≤<em>d**i</em>≤9, <em>i</em>=0,⋯,<em>k</em>−1, <em>d**k</em>−1&gt;0)，请编写程序统计每种不同的个位数字出现的次数。例如：给定 <em>N</em>=100311，则有 2 个 0，3 个 1，和 1 个 3。</p>
<h3 id="输入格式">输入格式：</h3>
<p>每个输入包含 1 个测试用例，即一个不超过 1000 位的正整数 <em>N</em>。</p>
<h3 id="输出格式">输出格式：</h3>
<p>对 <em>N</em> 中每一种不同的个位数字，以 <code>D:M</code> 的格式在一行中输出该位数字 <code>D</code> 及其在 <em>N</em> 中出现的次数 <code>M</code>。要求按 <code>D</code> 的升序输出。</p>
<h3 id="输入样例">输入样例：</h3>
<pre><code class="language-c">100311

      
    
</code></pre>
<h3 id="输出样例">输出样例：</h3>
<pre><code class="language-c">0:2
1:3
3:1
</code></pre>
<h2 id="我的笨办法">我的笨办法:</h2>
<p>\</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

#include &lt;stdlib.h&gt;



int main(void)

{

​    

​    int a[10]={0};



​    char ch[1000];

​    scanf(&quot;%s&quot;,ch);



​    for(int i=0;ch[i]!='\0';i++)

​    {

​        switch(ch[i])

​        {

​            case '0':a[0]++;break;

​            case '1':a[1]++;break;

​            case '2':a[2]++;break;

​            case '3':a[3]++;break;

​            case '4':a[4]++;break;

​            case '5':a[5]++;break;

​            case '6':a[6]++;break;

​            case '7':a[7]++;break;

​            case '8':a[8]++;break;

​            case '9':a[9]++;break;



​        }

​        

​    }

​    for(int i=0;i&lt;10;i++)

​    {

​        if(a[i]!=0)

​        {

​            printf(&quot;%d:%d\n&quot;,i,a[i]);

​        }

​        

​    }





​    system(&quot;pause&quot;);

​    return 0;

}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数据结构]]></title>
        <id>https://knightl8.club/post/shu-ju-jie-gou/</id>
        <link href="https://knightl8.club/post/shu-ju-jie-gou/">
        </link>
        <updated>2020-03-06T12:44:42.000Z</updated>
        <content type="html"><![CDATA[<h1 id="什么是线性表">什么是线性表</h1>
<p>&quot;线性表&quot;: 由同类型数据元素构成有序序列的线性结构</p>
<p>表中元素个数成为线性表的长度</p>
<p>线性表没有元素时,称为空表</p>
<p>表起始位置称为表头,表结束位置称为表尾.</p>
<h1 id="线性表的抽象数据类型表述">线性表的抽象数据类型表述</h1>
<h2 id="类型名称-线性表list">类型名称: 线性表(List)</h2>
<h2 id="数据对象集-线性表是n0个元素构成的有序序列a1a2an">数据对象集: 线性表是n(&gt;=0)个元素构成的有序序列(a1,a2,....an)</h2>
<h2 id="操作集线性表l数与list整数i表示位置元素x数与elementtype">操作集:线性表L数与List,整数i表示位置,元素x数与ElementType</h2>
<p>线性表基本操作主要有:</p>
<p>1  		List MakeEmpty();初始化一个空线性表</p>
<p>2		ElementType FindKth(int K,List L);	//根据位次序K,返回相应元素</p>
<p>3		int Find(ElementType X,List L);		//在线性表L中查找X的第一次出现位置</p>
<p>4		void Insert(ElementType X,int i,List l);	//在位序i前插入一个新元素X;</p>
<p>5		vod Delete(int i,List L);		删除指定位序i的元素</p>
<p>6		int Length(List L);			返回线性表L的长度n</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://knightl8.club/post/hello-gridea/</id>
        <link href="https://knightl8.club/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>